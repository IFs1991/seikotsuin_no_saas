# Docker導入要件定義書 v2.0
# プロジェクト: ティラミス（美容・ウェルネス業界向けSaaS）
# 作成日: 2025-09-20
# 更新日: 2025-09-21
# バージョン: 2.0.0

# ===================================
# 1. プロジェクト概要
# ===================================
project:
  name: "ティラミス (Tiramisu)"
  version: "0.1.0"
  description: "整骨院・エステ・ヘアサロン向け統合管理SaaS"
  meaning: "Pick me up - あなたのビジネスを次のステージへ引き上げる"
  repository: "seikotsuin-management-saas"

  # 現在の開発状況
  current_status:
    phase: "フロントエンド基盤完成"
    completion_rate: "Phase 0: 100%完了"
    production_ready_pages: 7
    test_coverage: "96% (95個中91個成功)"

# ===================================
# 2. 技術スタック（実装済み）
# ===================================
technical_stack:
  frontend:
    framework:
      name: "Next.js"
      version: "15.4.5"
      features:
        - "App Router"
        - "Server Components"
        - "Middleware統合"
    ui_library:
      name: "React"
      version: "19.0.0"
    language:
      name: "TypeScript"
      version: "5.7.2"
    styling:
      name: "Tailwind CSS"
      version: "3.4.17"
      plugins:
        - "@tailwindcss/forms"
        - "@tailwindcss/typography"
        - "@tailwindcss/aspect-ratio"

  backend:
    database:
      name: "Supabase"
      version: "2.56.0"
      features:
        - "PostgreSQL"
        - "Real-time subscriptions"
        - "Row Level Security (RLS)"
    auth:
      name: "Supabase Auth"
      integration: "@supabase/auth-helpers-nextjs"
    storage: "Supabase Storage"

  infrastructure:
    containerization:
      primary: "Docker"
      orchestration: "Docker Compose"
      registry: "Docker Hub / AWS ECR"
    ci_cd:
      platform: "GitHub Actions"
      current_workflow: ".github/workflows/ci.yml"

  testing:
    unit_test:
      framework: "Jest"
      version: "29.7.0"
    component_test:
      library: "React Testing Library"
      version: "16.1.0"
    coverage_target: "80%以上"

  code_quality:
    linter:
      tool: "ESLint"
      version: "9.18.0"
      config: "eslint.config.mjs"
    formatter:
      tool: "Prettier"
      version: "3.4.2"
    type_check: "TypeScript strict mode"

# ===================================
# 3. Docker要件定義
# ===================================
docker_requirements:

  # -----------------------------
  # 3.1 開発環境要件
  # -----------------------------
  development:
    dockerfile: "Dockerfile.dev"
    compose_file: "docker-compose.dev.yml"

    base_image:
      name: "node:20-alpine"
      rationale: "軽量かつセキュア、Next.js 15との互換性確保"

    features:
      hot_reload:
        implementation: "ボリュームマウントによるソースコード同期"
        volumes:
          - "./src:/app/src:cached"
          - "./public:/app/public:cached"
          - "./package.json:/app/package.json"
          - "./package-lock.json:/app/package-lock.json"
        exclude_from_mount:
          - "node_modules"
          - ".next"

      environment_variables:
        source: ".env.local"
        required:
          - "NEXT_PUBLIC_SUPABASE_URL"
          - "NEXT_PUBLIC_SUPABASE_ANON_KEY"
          - "SUPABASE_SERVICE_ROLE_KEY"
        optional:
          - "NEXT_PUBLIC_GEMINI_API_KEY"
          - "NODE_ENV=development"

      networking:
        ports:
          app: "3001:3001"  # package.jsonのdev設定に合わせる
        hostname: "0.0.0.0"  # 全インターフェースでリッスン

      performance:
        cpu_limit: "2"
        memory_limit: "2G"
        memory_reservation: "1G"

    services:
      nextjs_app:
        build_context: "."
        dockerfile: "Dockerfile.dev"
        command: "npm run dev"
        restart: "unless-stopped"
        healthcheck:
          test: "wget --no-verbose --tries=1 --spider http://localhost:3001 || exit 1"
          interval: "30s"
          timeout: "10s"
          retries: 3
          start_period: "40s"

      # Supabaseローカル開発環境（オプション）
      supabase_local:
        enabled: false  # 本番Supabaseを使用する場合はfalse
        compose_override: "docker-compose.supabase.yml"
        services:
          - "postgres"
          - "supabase-studio"
          - "supabase-auth"
          - "supabase-rest"

  # -----------------------------
  # 3.2 本番環境要件
  # -----------------------------
  production:
    dockerfile: "Dockerfile"
    compose_file: "docker-compose.yml"

    # マルチステージビルド設計
    build_stages:
      # Stage 1: 依存関係インストール
      deps:
        base_image: "node:20-alpine"
        purpose: "依存関係の分離インストール"
        optimizations:
          - "package*.jsonのみコピーでキャッシュ最適化"
          - "npm ci --only=production"
          - "devDependenciesを除外"

      # Stage 2: ビルド
      builder:
        base_image: "node:20-alpine"
        purpose: "Next.jsアプリケーションのビルド"
        steps:
          - "全ソースコードのコピー"
          - "TypeScriptコンパイル"
          - "Next.js standalone出力生成"
          - "静的アセットの最適化"
        optimizations:
          - "NEXT_TELEMETRY_DISABLED=1"
          - "NODE_ENV=production"
          - "Next.js output: 'standalone'"

      # Stage 3: 実行
      runner:
        base_image: "node:20-alpine"
        purpose: "最小限の本番実行環境"
        security:
          user: "node:node (非root)"
          readonly_filesystem: false  # Next.jsキャッシュのため
          capabilities_drop: ["ALL"]
          capabilities_add: ["CHOWN", "SETUID", "SETGID"]

        files_included:
          - ".next/standalone"
          - ".next/static"
          - "public"
          - "next.config.js"

        runtime_config:
          port: 3000
          command: "node server.js"
          working_dir: "/app"

    image_optimization:
      target_size: "< 100MB"
      techniques:
        - "Alpine Linuxベースイメージ"
        - "不要ファイル除外（.dockerignore）"
        - "マルチステージビルド"
        - "レイヤーキャッシュ最適化"
        - "package-lock.json活用"

    security_hardening:
      # セキュリティスキャン
      vulnerability_scanning:
        tools:
          - name: "Trivy"
            stage: "CI/CDパイプライン"
            fail_threshold: "CRITICAL"
          - name: "Snyk"
            stage: "定期スキャン"
            frequency: "週次"

      # 実行時セキュリティ
      runtime_security:
        - "非rootユーザー実行"
        - "読み取り専用ルートファイルシステム"
        - "機密情報の環境変数管理"
        - "ヘルスチェックエンドポイント実装"

      # CSP対応（実装済み機能との連携）
      content_security_policy:
        implementation: "middleware.ts経由"
        nonce_support: true
        report_uri: "/api/csp-report"

  # -----------------------------
  # 3.3 CI/CD統合
  # -----------------------------
  ci_cd_integration:
    github_actions:
      workflow_files:
        - ".github/workflows/docker-build.yml"  # 新規作成予定
        - ".github/workflows/ci.yml"  # 既存（テスト用）

      docker_workflow:
        name: "Docker Build & Push"

        triggers:
          push:
            branches: ["main"]
            paths:
              - "src/**"
              - "package*.json"
              - "Dockerfile*"
              - "docker-compose*.yml"
          pull_request:
            branches: ["main"]
          schedule:
            cron: "0 0 * * MON"  # 週次セキュリティスキャン

        jobs:
          # Job 1: ビルド&テスト
          build_test:
            steps:
              - "Checkout code"
              - "Setup Docker Buildx"
              - "Cache Docker layers"
              - "Build development image"
              - "Run tests in container"
              - "Run security scan (Trivy)"

          # Job 2: 本番イメージビルド&プッシュ
          build_push:
            if: "github.ref == 'refs/heads/main'"
            steps:
              - "Build production image"
              - "Tag with version and SHA"
              - "Push to registry"
              - "Update deployment manifest"

          # Job 3: デプロイ
          deploy:
            environments:
              staging:
                auto_deploy: true
                health_check: true
              production:
                manual_approval: true
                rollback_enabled: true

    versioning_strategy:
      tags:
        - "latest"  # 最新の安定版
        - "v{major}.{minor}.{patch}"  # セマンティックバージョニング
        - "sha-{commit_sha}"  # コミット固有タグ
        - "branch-{branch_name}"  # ブランチ別タグ

      registry:
        primary: "docker.io/tiramisu-saas"
        backup: "ecr.ap-northeast-1.amazonaws.com/tiramisu"

# ===================================
# 4. Dockerファイル仕様
# ===================================
docker_files_specification:

  # Dockerfile.dev（開発環境）
  dockerfile_dev:
    content: |
      FROM node:20-alpine

      # 必要なシステムパッケージインストール
      RUN apk add --no-cache libc6-compat

      WORKDIR /app

      # 依存関係のインストール（キャッシュ活用）
      COPY package*.json ./
      RUN npm ci

      # アプリケーションコードのコピー
      COPY . .

      # ポート公開
      EXPOSE 3001

      # 開発サーバー起動
      CMD ["npm", "run", "dev"]

  # Dockerfile（本番環境）
  dockerfile_prod:
    content: |
      # Stage 1: Dependencies
      FROM node:20-alpine AS deps
      RUN apk add --no-cache libc6-compat
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci --only=production

      # Stage 2: Builder
      FROM node:20-alpine AS builder
      RUN apk add --no-cache libc6-compat
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci
      COPY . .

      # Next.js telemetryを無効化
      ENV NEXT_TELEMETRY_DISABLED 1

      # ビルド実行
      RUN npm run build

      # Stage 3: Runner
      FROM node:20-alpine AS runner
      WORKDIR /app

      ENV NODE_ENV production
      ENV NEXT_TELEMETRY_DISABLED 1

      # セキュリティ: 非rootユーザー作成
      RUN addgroup --system --gid 1001 nodejs
      RUN adduser --system --uid 1001 nextjs

      # standalone出力と静的ファイルのコピー
      COPY --from=builder /app/.next/standalone ./
      COPY --from=builder /app/.next/static ./.next/static
      COPY --from=builder /app/public ./public

      # 権限設定
      RUN chown -R nextjs:nodejs /app

      USER nextjs

      EXPOSE 3000

      CMD ["node", "server.js"]

  # docker-compose.dev.yml
  docker_compose_dev:
    content: |
      version: '3.8'

      services:
        app:
          build:
            context: .
            dockerfile: Dockerfile.dev
          ports:
            - "3001:3001"
          volumes:
            - ./src:/app/src:cached
            - ./public:/app/public:cached
            - ./package.json:/app/package.json
            - ./package-lock.json:/app/package-lock.json
          environment:
            - NODE_ENV=development
            - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
            - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
          restart: unless-stopped
          networks:
            - tiramisu-network

      networks:
        tiramisu-network:
          driver: bridge

  # docker-compose.yml（本番環境）
  docker_compose_prod:
    content: |
      version: '3.8'

      services:
        app:
          image: tiramisu-saas:latest
          ports:
            - "3000:3000"
          environment:
            - NODE_ENV=production
            - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
            - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
          restart: always
          healthcheck:
            test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
            interval: 30s
            timeout: 10s
            retries: 3
          networks:
            - tiramisu-network
          deploy:
            resources:
              limits:
                cpus: '1'
                memory: 512M
              reservations:
                cpus: '0.5'
                memory: 256M

      networks:
        tiramisu-network:
          driver: bridge

  # .dockerignore
  dockerignore:
    content: |
      # Git
      .git
      .gitignore

      # Dependencies
      node_modules

      # Next.js
      .next
      out

      # Testing
      coverage
      .nyc_output

      # IDE
      .vscode
      .idea

      # OS
      .DS_Store
      Thumbs.db

      # Env files (本番では別途注入)
      .env*.local

      # Documentation
      *.md
      docs

      # Development
      .eslintrc*
      .prettierrc*
      jest.config.js
      tsconfig.tsbuildinfo

# ===================================
# 5. 運用・監視要件
# ===================================
operational_requirements:

  monitoring:
    metrics:
      application:
        - "Response time (p50, p95, p99)"
        - "Error rate"
        - "Request per second"
        - "Active connections"

      container:
        - "CPU utilization"
        - "Memory usage"
        - "Network I/O"
        - "Disk usage"

      business:
        - "Active users"
        - "API call volume"
        - "Database query performance"

    tools:
      apm: "Datadog / New Relic"
      logging: "CloudWatch / ELK Stack"
      tracing: "OpenTelemetry"

    alerting:
      channels:
        - "Slack"
        - "Email"
        - "PagerDuty"

      thresholds:
        critical:
          - "Error rate > 5%"
          - "Response time p99 > 3s"
          - "Memory usage > 90%"
        warning:
          - "Error rate > 1%"
          - "Response time p95 > 2s"
          - "Memory usage > 70%"

  backup_disaster_recovery:
    backup_strategy:
      frequency: "Continuous (Supabase managed)"
      retention: "30 days"
      test_restore: "月次"

    disaster_recovery:
      rto: "< 1時間"  # Recovery Time Objective
      rpo: "< 15分"   # Recovery Point Objective
      failover: "自動"
      rollback_procedure: "Blue-Green deployment"

  scaling:
    horizontal:
      auto_scaling:
        enabled: true
        min_replicas: 2
        max_replicas: 10
        metrics:
          - type: "CPU"
            target: 70
          - type: "Memory"
            target: 80
          - type: "Request Rate"
            target: 1000

    vertical:
      resource_limits:
        cpu: "1-4 cores"
        memory: "512MB-2GB"

    load_balancing:
      type: "Application Load Balancer"
      algorithm: "Round Robin"
      health_check:
        path: "/api/health"
        interval: 30
        timeout: 10

# ===================================
# 6. セキュリティ要件（詳細）
# ===================================
security_requirements_detailed:

  # コンテナセキュリティ
  container_security:
    image_scanning:
      pre_deploy:
        - tool: "Trivy"
          threshold: "CRITICAL/HIGH"
        - tool: "Clair"
          integration: "CI/CD"

      runtime:
        - tool: "Falco"
          monitoring: "Anomaly detection"

    secrets_management:
      method: "AWS Secrets Manager / Kubernetes Secrets"
      rotation: "90日ごと"
      encryption: "AES-256"

    network_policies:
      ingress:
        - from: "Load Balancer"
          port: 3000
          protocol: "HTTPS"
      egress:
        - to: "Supabase"
          port: 443
          protocol: "HTTPS"
        - to: "Gemini API"
          port: 443
          protocol: "HTTPS"

  # アプリケーションセキュリティ
  application_security:
    implemented_features:
      - "CSP (Content Security Policy) with nonce"
      - "Rate limiting (middleware.ts)"
      - "Session management (SessionManager)"
      - "Security monitoring (SecurityMonitor)"
      - "CSRF protection"
      - "XSS protection"

    authentication:
      provider: "Supabase Auth"
      mfa: "TOTP (実装済み)"
      session_timeout: "30分（設定可能）"

    authorization:
      model: "RBAC (Role-Based Access Control)"
      roles:
        - "admin"
        - "manager"
        - "therapist"
        - "receptionist"

      middleware_protection:
        - "/admin/* - admin only"
        - "/staff/* - staff only"
        - "/api/* - authenticated only"

  compliance:
    standards:
      - "HIPAA (医療情報)"
      - "個人情報保護法"
      - "GDPR (EU顧客対応)"

    audit_logging:
      events:
        - "Authentication attempts"
        - "Data access"
        - "Configuration changes"
        - "Security violations"
      retention: "1年"
      storage: "Supabase audit_logs table"

# ===================================
# 7. パフォーマンス目標
# ===================================
performance_targets:

  build_time:
    development:
      initial: "< 60秒"
      hot_reload: "< 2秒"
    production:
      docker_build: "< 5分"
      ci_cd_pipeline: "< 10分"

  runtime:
    startup:
      cold_start: "< 10秒"
      warm_start: "< 3秒"

    response_time:
      p50: "< 100ms"
      p95: "< 500ms"
      p99: "< 1000ms"

    throughput:
      requests_per_second: "> 1000"
      concurrent_users: "> 500"

    resource_usage:
      memory:
        idle: "< 256MB"
        peak: "< 512MB"
      cpu:
        idle: "< 5%"
        peak: "< 80%"

  image_size:
    development: "< 500MB"
    production: "< 100MB"
    layers: "< 20"

# ===================================
# 8. 実装ロードマップ
# ===================================
implementation_roadmap:

  phase_1:
    name: "基盤構築"
    duration: "1週間"
    start_date: "2025-09-23"
    tasks:
      - id: "DOCK-001"
        task: "Dockerfile.dev作成"
        priority: "High"
        assigned_to: "DevOps Team"
      - id: "DOCK-002"
        task: "docker-compose.dev.yml作成"
        priority: "High"
      - id: "DOCK-003"
        task: "開発環境での動作確認"
        priority: "High"
      - id: "DOCK-004"
        task: "ホットリロード検証"
        priority: "Medium"

    success_criteria:
      - "docker-compose up で開発環境起動"
      - "ソースコード変更が即座に反映"
      - "全開発者の環境統一"

    deliverables:
      - "Dockerfile.dev"
      - "docker-compose.dev.yml"
      - ".dockerignore"
      - "開発環境セットアップガイド"

  phase_2:
    name: "本番最適化"
    duration: "1週間"
    start_date: "2025-09-30"
    tasks:
      - id: "DOCK-005"
        task: "マルチステージDockerfile作成"
        priority: "High"
      - id: "DOCK-006"
        task: "イメージサイズ最適化"
        priority: "High"
      - id: "DOCK-007"
        task: "セキュリティ強化実装"
        priority: "Critical"
      - id: "DOCK-008"
        task: "パフォーマンステスト"
        priority: "Medium"

    success_criteria:
      - "本番イメージサイズ < 100MB"
      - "起動時間 < 10秒"
      - "セキュリティスキャン合格"

    deliverables:
      - "Dockerfile (production)"
      - "docker-compose.yml"
      - "セキュリティレポート"
      - "パフォーマンステスト結果"

  phase_3:
    name: "CI/CD統合"
    duration: "1週間"
    start_date: "2025-10-07"
    tasks:
      - id: "DOCK-009"
        task: "GitHub Actions workflow作成"
        priority: "High"
      - id: "DOCK-010"
        task: "自動ビルド・テスト設定"
        priority: "High"
      - id: "DOCK-011"
        task: "レジストリ連携"
        priority: "Medium"
      - id: "DOCK-012"
        task: "自動デプロイ設定"
        priority: "Medium"

    success_criteria:
      - "プッシュ時の自動ビルド成功"
      - "全テストのコンテナ内実行"
      - "本番環境への自動デプロイ"

    deliverables:
      - ".github/workflows/docker-build.yml"
      - "デプロイメントマニフェスト"
      - "CI/CD運用ガイド"

  phase_4:
    name: "本番運用開始"
    duration: "1週間"
    start_date: "2025-10-14"
    tasks:
      - id: "DOCK-013"
        task: "本番環境デプロイ"
        priority: "Critical"
      - id: "DOCK-014"
        task: "監視・アラート設定"
        priority: "High"
      - id: "DOCK-015"
        task: "スケーリング設定"
        priority: "Medium"
      - id: "DOCK-016"
        task: "災害復旧テスト"
        priority: "High"

    success_criteria:
      - "46店舗全店での稼働確認"
      - "24時間無停止運用"
      - "自動スケーリング動作確認"

    deliverables:
      - "運用手順書"
      - "トラブルシューティングガイド"
      - "監視ダッシュボード"

# ===================================
# 9. リスク管理
# ===================================
risk_management:

  technical_risks:
    - id: "RISK-001"
      risk: "Next.js 15のDocker内での互換性問題"
      probability: "Medium"
      impact: "High"
      mitigation:
        - "事前の互換性テスト実施"
        - "Next.js公式Dockerサンプル参照"
        - "段階的な移行計画"
      contingency: "Next.js 14へのダウングレード"

    - id: "RISK-002"
      risk: "Supabaseとの接続遅延"
      probability: "Low"
      impact: "High"
      mitigation:
        - "接続プール最適化"
        - "リトライメカニズム実装"
        - "キャッシュ戦略導入"
      contingency: "Supabaseローカル環境構築"

    - id: "RISK-003"
      risk: "イメージサイズの肥大化"
      probability: "Medium"
      impact: "Medium"
      mitigation:
        - "定期的なイメージ分析"
        - "不要な依存関係の削除"
        - "マルチステージビルド最適化"
      contingency: "代替ベースイメージの検討"

  operational_risks:
    - id: "RISK-004"
      risk: "開発チームの学習曲線"
      probability: "High"
      impact: "Medium"
      mitigation:
        - "段階的な導入"
        - "充実したドキュメント作成"
        - "ハンズオントレーニング実施"
      contingency: "外部エキスパート採用"

    - id: "RISK-005"
      risk: "本番移行時のダウンタイム"
      probability: "Medium"
      impact: "High"
      mitigation:
        - "Blue-Greenデプロイメント"
        - "段階的ロールアウト"
        - "ロールバック手順準備"
      contingency: "緊急時の旧環境切り戻し"

# ===================================
# 10. 成功指標（KPI）
# ===================================
success_metrics:

  development_efficiency:
    metrics:
      - name: "環境構築時間"
        current: "3時間"
        target: "5分以内"
        measurement: "新規開発者のセットアップ時間"

      - name: "開発環境の一貫性"
        current: "70%"
        target: "100%"
        measurement: "環境差異に起因するバグ数"

      - name: "ビルド時間"
        current: "10分"
        target: "3分以内"
        measurement: "CI/CDパイプライン実行時間"

  operational_excellence:
    metrics:
      - name: "デプロイ頻度"
        current: "週1回"
        target: "日次"
        measurement: "本番デプロイ回数/週"

      - name: "デプロイ成功率"
        current: "90%"
        target: "99%"
        measurement: "成功デプロイ/全デプロイ"

      - name: "MTTR (Mean Time To Recovery)"
        current: "2時間"
        target: "30分以内"
        measurement: "障害検知から復旧までの平均時間"

  cost_optimization:
    metrics:
      - name: "インフラコスト削減"
        current: "¥50,000/月"
        target: "¥35,000/月"
        measurement: "月次インフラ費用"

      - name: "リソース使用効率"
        current: "40%"
        target: "70%"
        measurement: "CPU/メモリ平均使用率"

# ===================================
# 11. 予算計画
# ===================================
budget_plan:

  initial_investment:
    development:
      engineer_hours: 160  # 4週間 x 1名
      hourly_rate: 8000
      total_cost: 1280000

    infrastructure:
      docker_registry: 5000  # 初期設定
      monitoring_tools: 10000  # セットアップ
      total_cost: 15000

    training:
      workshop: 50000
      documentation: 30000
      total_cost: 80000

    total_initial: 1375000

  monthly_operational:
    infrastructure:
      container_registry: 3000
      monitoring: 10000
      logging: 5000
      total: 18000

    maintenance:
      security_updates: 10000
      optimization: 5000
      total: 15000

    total_monthly: 33000

  roi_calculation:
    savings:
      development_time: 300000  # 月次削減額
      operational_efficiency: 100000
      incident_reduction: 50000
      total_monthly_savings: 450000

    payback_period: "3.1ヶ月"
    annual_roi: "1204%"

# ===================================
# 12. 承認と責任分担
# ===================================
approval_governance:

  stakeholders:
    - role: "CTO"
      name: "技術責任者"
      responsibilities:
        - "技術方針承認"
        - "アーキテクチャレビュー"
        - "最終承認"

    - role: "DevOps Lead"
      name: "インフラ責任者"
      responsibilities:
        - "実装主導"
        - "CI/CD設計"
        - "運用体制構築"

    - role: "Security Officer"
      name: "セキュリティ責任者"
      responsibilities:
        - "セキュリティ要件定義"
        - "脆弱性評価"
        - "コンプライアンス確認"

    - role: "Product Manager"
      name: "プロダクト責任者"
      responsibilities:
        - "ビジネス要件確認"
        - "リリース計画承認"
        - "ステークホルダー調整"

  approval_process:
    - stage: "要件定義レビュー"
      approver: ["CTO", "Security Officer"]
      deadline: "2025-09-22"

    - stage: "実装計画承認"
      approver: ["DevOps Lead", "Product Manager"]
      deadline: "2025-09-23"

    - stage: "本番移行承認"
      approver: ["CTO", "Product Manager"]
      deadline: "2025-10-14"

# ===================================
# 更新履歴
# ===================================
revision_history:
  - version: "2.0.0"
    date: "2025-09-21"
    author: "Claude AI Assistant"
    changes:
      - "実際のプロジェクト構成との整合性確保"
      - "最新バージョンへの更新（Next.js 15.4.5、React 19.0.0）"
      - "セキュリティ要件の詳細化（CSP、レート制限等）"
      - "CI/CD統合の具体化"
      - "パフォーマンス目標の明確化"
      - "実装ロードマップの詳細化"
      - "リスク管理計画の追加"
      - "KPIとROI計算の精緻化"

  - version: "1.0.0"
    date: "2025-09-20"
    author: "Claude Code"
    changes:
      - "初版作成"