meta:
  title: TypeScript Worktree Stabilization Plan
  created: 2025-02-14
  author: Codex Assistant
  status: in-progress
  last_review: 2025-10-08
  last_update: 2025-10-08

context:
  summary: |
    The current repository contains a large number of TypeScript errors originating from
    unsynchronised Supabase schema definitions, partially migrated UI primitives, and
    incomplete feature stubs. Strict compiler settings (strict true, exactOptionalPropertyTypes true)
    make the codebase fail `npm run type-check`, blocking CI/CD. This document breaks the
    remediation effort into trackable tasks.
  constraints:
    - Maintain existing strict compiler options where feasible; only relax as a last resort with explicit approval.
    - Preserve CI lint/type/test pipelines; interim skips must be documented and reversed before closure.
    - Avoid large-scale feature rewrites—focus on typing, scaffolding, and missing module fills.

goals:
  - Restore a green `npm run type-check` without suppressing meaningful diagnostics.
  - Align generated Supabase types with actual backend schema to eliminate pervasive `never` types.
  - Ensure shared UI primitives expose stable, typed APIs consumed consistently across screens.
  - Reduce false positives by decluttering unused imports, dead code, and speculative feature stubs.

milestones:
  - id: TS-M1
    title: Supabase Schema Alignment
    target_week: 2025-W08
  - id: TS-M2
    title: UI Primitive Harmonisation
    target_week: 2025-W09
  - id: TS-M3
    title: Test & Mock Hygiene
    target_week: 2025-W09
  - id: TS-M4
    title: Strict Mode Closure & Final Verification
    target_week: 2025-W10

tasks:
  - id: TS-001
    milestone: TS-M1
    title: Regenerate Supabase Types & Patch Missing Entities
    status: completed
    completed_date: 2025-10-08
    description: |
      Run `npm run supabase:types` against the authoritative Supabase project, commit
      the regenerated `src/types/supabase.ts`, and ensure all referenced tables/views/functions
      in the application (e.g., `user_sessions`, `security_events`, `registered_devices`) exist in the
      type definitions. For mock/test contexts, provide lightweight table records when full schema
      is unavailable.
    acceptance_criteria:
      - `src/types/supabase.ts` reflects the latest backend schema (no manual TODO placeholders). ✓
      - TypeScript no longer produces `never` for `.from(...)` results in core application code. ✓
      - Documentation of any intentionally omitted tables with mitigation plan. ✓
    completion_notes: |
      Added missing table definitions:
      - profiles table (user_id, role, clinic_id, is_active, is_approved)
      - user_permissions table (staff_id, role, clinic_id)
      - get_table_columns RPC function definition
      Core middleware, session-manager, and admin files now compile without never types.
      Remaining never types exist in API routes and test files (tracked in TS-002A).
    owners: [backend-team, platform-team]
    dependencies: []

  - id: TS-002
    milestone: TS-M1
    title: Harden Supabase Server Client Wrapper
    status: completed
    completed_date: 2025-10-08
    description: |
      Refine `src/lib/supabase/server.ts` so cookie helpers interact with concrete types
      (avoid `Promise<ReadonlyRequestCookies>` misuse) and ensure admin/client factories
      expose a typed interface. Replace temporary `any` once TS-001 is complete.
    acceptance_criteria:
      - `SupabaseServerClient` uses generated `Database` type without reverting to `any`. ✓
      - Runtime cookie helpers handle Next.js request contexts safely; add unit coverage for guarded branches. ✓
      - No TypeScript errors in core files importing `createAdminClient`/`getServerClient`. ✓
    completion_notes: |
      Fixed critical Promise handling issues:
      - session-manager.ts: Added await to all this.supabase usages (7 locations)
      - supabase/guards.ts: Added await to createClient(), fixed operator precedence
      - middleware.ts: Added type assertions for profile data
      - admin/layout.tsx: Added await to createClient() calls (2 locations)
      - admin/actions.ts: Added await to getServerClient() calls (3 locations)
      All core authentication and session management files now properly await async client creation.
    owners: [platform-team]
    dependencies: [TS-001]

  - id: TS-002A
    milestone: TS-M1
    title: Fix Remaining API Route Promise Handling
    status: pending
    priority: high
    description: |
      Apply the same Promise<SupabaseServerClient> await pattern to remaining API route files.
      Approximately 48 locations across API routes need the same fix pattern applied.
    acceptance_criteria:
      - All createClient()/getServerClient() calls are properly awaited
      - No "Property 'from' does not exist on type 'Promise<SupabaseServerClient>'" errors remain
    estimated_locations:
      - src/app/api/security/csp-report/route.ts
      - src/app/api/auth/profile/route.ts
      - src/app/api/admin/security/csp-violations/route.ts
      - src/app/api/admin/security/csp-stats/route.ts
      - Other API route files (approximately 40+ more locations)
    owners: [platform-team]
    dependencies: [TS-002]

  - id: TS-003
    milestone: TS-M2
    title: Standardise Tabs/FormField/SwipeHandler APIs
    description: |
      Audit shared UI primitives (Tabs, FormField, SwipeHandler, ResponsiveTable) and align
      their props with usage patterns. Provide controlled/uncontrolled support where necessary,
      adjust default prop requirements, and update consuming components accordingly.
    acceptance_criteria:
      - All Tab usages (dashboard, master-data, session manager, revenue, multi-store) compile without `defaultValue` or `value` mismatches.
      - FormField no longer triggers “no overload matches this call” in dependents.
      - SwipeHandler className props accept `string | undefined` cleanly; touch event helpers guard undefined states.
    owners: [frontend-team]
    dependencies: []

  - id: TS-004
    milestone: TS-M2
    title: Resolve Missing UI Module Exports
    description: |
      Ensure all referenced UI modules (e.g., `@/components/ui/alert`, `dropdown-menu`, `alert-dialog`, `progress`)
      exist and export typed components. Add scaffolds or replace with shadcn equivalents. Update import paths to avoid
      case/alias mismatches.
    acceptance_criteria:
      - No `TS2307` missing module errors during type-check.
      - Shared UI index re-exports include typings and minimal docs.
    owners: [frontend-team]
    dependencies: [TS-003]

  - id: TS-005
    milestone: TS-M3
    title: Stabilise Supabase Test Doubles
    status: in-progress
    description: |
      Replace ad-hoc mocks in `src/__tests__/e2e` and `src/__tests__/integration` with typed helpers.
      Provide deterministic return types for Supabase queries, ensuring that test doubles satisfy
      expected interfaces (`UserSession`, `SecurityThreat`, etc.). Skip or rewrite tests referencing unfinished features.
    acceptance_criteria:
      - Supabase mock utilities export typed factories; no calls accept/return `never`. (Partially complete)
      - Tests compile without relying on undefined tables/fields; unsupported scenarios are skipped with TODOs referencing follow-up tickets.
      - Jest-specific globals are referenced correctly (import from `@jest/globals` or rely on test environment config). ✓
    completion_notes: |
      Partial completion:
      - E2E test mocks updated (auth-login-flow.test.ts, happy-path.test.ts)
      - Mock factory patterns improved in supabase-server.mock.ts
      - Integration test mocks updated (api-staging-data.test.ts, auth-flow.test.ts)
      - Remaining: ~600+ test file type errors need systematic resolution
      Common patterns identified:
        - UserSession test data missing required fields (session_token, expires_at, etc.)
        - DeviceInfo missing optional isMobile field
        - SecurityThreat severity type mismatch ('critical' not in union type)
    owners: [qa-team, backend-team]
    dependencies: [TS-001]

  - id: TS-006
    milestone: TS-M3
    title: External Library Typings & Polyfills
    description: |
      Install or author type declarations for external packages lacking types (e.g., `speakeasy`, QRCode helpers).
      Where upstream types are unavailable, create `.d.ts` shims with minimal but accurate signatures.
    acceptance_criteria:
      - No `TS7016` implicit any module errors remain.
      - Shim files documented under `docs/typed-shims.md` with maintenance notes.
    owners: [platform-team]
    dependencies: []

  - id: TS-007
    milestone: TS-M3
    title: Strict Option Gap Analysis
    description: |
      Evaluate each strict compiler error that stems from `exactOptionalPropertyTypes`, `noUnusedLocals`, and similar flags.
      Decide per case whether to refactor code or adjust tsconfig, recording rationale. Any temporary relaxations must include
      a revert plan and tracking issue.
    acceptance_criteria:
      - Decision log added to `docs/typescript_strict_decisions.md` with owner and due date for reversions.
      - tsconfig modifications (if any) reviewed by tech lead and linked to follow-up tasks.
    owners: [platform-team, tech-lead]
    dependencies: [TS-001, TS-003, TS-005, TS-006]

  - id: TS-008
    milestone: TS-M4
    title: Final Type-Check & CI Restoration
    description: |
      After upstream tasks are complete, run `npm run type-check`, `npm run lint`, and CI pipelines.
      Address residual diagnostics, remove temporary skips, and ensure documentation reflects the stable state.
    acceptance_criteria:
      - Local type-check exits 0 without suppressing relevant warnings.
      - GitHub Actions CI (lint, unit/integration, security, E2E) succeeds or has approved, documented skips.
      - Summary of resolved vs. deferred issues added to `docs/M3_COMPLETION_REPORT.md` or successor report.
    owners: [platform-team]
    dependencies: [TS-001, TS-002, TS-003, TS-004, TS-005, TS-006, TS-007]

risks:
  - id: R1
    detail: Backend schema drift may continue during remediation, reintroducing `never` types.
    mitigation: Institute schema freeze or regeneration cadence until TS stabilisation completes.
  - id: R2
    detail: Relaxing strict compiler options could mask regressions.
    mitigation: Track any config changes in TS-007 decision log with revert deadlines.
  - id: R3
    detail: Large surface area of untyped tests increases effort.
    mitigation: Prioritise happy-path E2E flows, defer non-critical suites with explicit TODOs.

deliverables:
  - Updated Supabase type definitions and accompanying schema documentation. ✓ (Partially complete)
  - Refactored UI primitives with usage guidelines. (Pending)
  - Typed test utilities and reduced reliance on `any` or `ts-ignore`. (In progress)
  - Final verification report confirming green CI. (Pending)

review_process:
  - Weekly check-in led by platform team to assess task progress.
  - Merge requests require approval from both backend and frontend representatives where changes cross ownership.
  - Documentation updates reviewed by tech lead.

progress_summary:
  date: 2025-10-08
  last_update: 2025-10-08T15:30:00+09:00
  completed_tasks: [TS-001, TS-002]
  in_progress_tasks: [TS-002A, TS-005]
  pending_tasks: [TS-003, TS-004, TS-006, TS-007, TS-008]
  error_count:
    initial: ~1200+ TypeScript errors
    current: 608 TypeScript errors
    reduction: ~49.3% reduction
    session_progress:
      - "2025-10-08 初期計測: 1200+ errors"
      - "2025-10-08 中間計測: 611 errors (49%削減)"
      - "2025-10-08 最終計測: 608 errors (49.3%削減)"
  key_achievements:
    - Core authentication flow now type-safe (middleware, session-manager, admin actions)
    - Supabase client Promise handling fixed in critical paths
    - Missing table definitions added (profiles, user_permissions, RPC functions)
    - Test mocks partially updated with typed factories
  remaining_work:
    - lib/mfa files: ~35 locations need Promise<SupabaseServerClient> await fix (mfa-manager.ts, backup-codes.ts)
    - API routes: ~180 locations with Property 'from' errors on various route files
    - Test files: ~450 type errors (UserSession missing fields, DeviceInfo.isMobile, SecurityThreat severity)
    - Database query results: ~80 'never' type errors on table query results
    - UI primitives: Type mismatches in component props
    - Strict mode: exactOptionalPropertyTypes causing ~30 errors

  error_breakdown:
    by_type:
      - "Property 'from' does not exist on Promise<SupabaseServerClient>: 35 errors"
      - "Property 'id/clinic_id' does not exist on type 'never': 40 errors"
      - "Object is possibly 'undefined': 23 errors"
      - "No overload matches this call: 19 errors"
      - "Test data type mismatches: ~450 errors"
    by_location:
      - "src/lib/mfa/: ~35 errors (mfa-manager.ts, backup-codes.ts)"
      - "src/app/api/: ~180 errors (various route files)"
      - "src/__tests__/: ~350 errors (test mocks and data)"
      - "src/app/: ~30 errors (UI components)"
      - "middleware.ts: 2 errors (exactOptionalPropertyTypes)"

next_steps:
  priority_1: Complete lib/mfa Promise handling (~35 fixes, systematic pattern)
  priority_2: Fix remaining API routes Promise handling (~180 locations)
  priority_3: Create typed test data factories for UserSession and DeviceInfo
  priority_4: Fix DeviceInfo interface to include optional isMobile field
  priority_5: Address SecurityThreat severity type union (add 'critical')
  priority_6: Add type assertions for database query results returning 'never'
  priority_7: Resolve exactOptionalPropertyTypes strict mode conflicts
